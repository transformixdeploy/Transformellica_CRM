version: "3.8"
name: transformellica-crm

services:
  node_backend:
    build:
      context: ./backend_node
      dockerfile: ./Dockerfile
      args:
        - PORT=${EXPRESS_PORT}
    container_name: node_backend
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${EXPRESS_PORT}
      - DB_HOST=postgres
      - DB_NAME=${DB_NAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_USERNAME=${DB_USERNAME}
      - FRONTEND_URLS=${FRONTEND_URLS}
      - AI_SERVICE_CRM_URL=${AI_SERVICE_CRM_URL}
      - AI_SERVICE_TRANSFORMELLICA_URL=${AI_SERVICE_TRANSFORMELLICA_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ACCESS_TOKEN_EXPIRE_TIME=${JWT_ACCESS_TOKEN_EXPIRE_TIME}
      - JWT_REFRESH_TOKEN_EXPIRE_TIME=${JWT_REFRESH_TOKEN_EXPIRE_TIME}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - DATABASE_URL=${DATABASE_URL}
    ports:
      - "${EXPRESS_PORT}:${EXPRESS_PORT}"
    depends_on:
      postgres: 
        condition: service_healthy
    restart: unless-stopped
  
  next_frontend:
    build:
      context: ./frontend-next
      dockerfile: ./Dockerfile
      args:
        - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
        - PORT=${FRONTEND_PORT}
    container_name: next_frontend
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    depends_on:
      - node_backend
    restart: unless-stopped

  flask_crm:
    build:
      context: ./flask_crm
      dockerfile: ./Dockerfile
      args:
        - PORT=${FLASK_CRM_PORT}
    container_name: flask_crm
    environment:
      - PORT=${FLASK_CRM_PORT}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - APP_ENV=${APP_ENV}
      - DEBUG=${DEBUG}
    ports:
      - "${FLASK_CRM_PORT}:${FLASK_CRM_PORT}"
    restart: unless-stopped
  
  flask_digital_analysis:
    build:
      context: ./flask_digital_analysis
      dockerfile: ./Dockerfile
      args:
        - PORT=${FLASK_DIGITAL_ANALYSIS_PORT}
    container_name: flask_digital_analysis
    environment:
      - PORT=${FLASK_DIGITAL_ANALYSIS_PORT}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
      - GOOGLE_PAGESPEED_API_KEY=${GOOGLE_PAGESPEED_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - APP_ENV=${APP_ENV}
      - DEBUG=${DEBUG}
    ports:
      - "${FLASK_DIGITAL_ANALYSIS_PORT}:${FLASK_DIGITAL_ANALYSIS_PORT}"
    depends_on:
      - mlflow_server
    restart: unless-stopped
    volumes:
      - wdm_cache:/app/.wdm
      - mlflow-tracking:/mlruns

  mlflow_server:
    build:
      context: ./mlflow_server
      dockerfile: ./Dockerfile
      args:
        - PORT=${ML_FLOW_PORT}
    container_name: mlflow_server
    environment:
      - PORT=${ML_FLOW_PORT}
      - MLFLOW_BACKEND_STORE_URI=${MLFLOW_BACKEND_STORE_URI}
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=${MLFLOW_DEFAULT_ARTIFACT_ROOT}
      - MLFLOW_HOST=${MLFLOW_HOST}
    ports:
      - "${ML_FLOW_PORT}:${ML_FLOW_PORT}"
    volumes:
      - mlflow-tracking:/app/mlruns
      - mlflow-artifacts:/app/mlartifacts
    restart: unless-stopped
  
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "8080:8080"   # host-port : internal-port
      - "8443:8443"   # host-port : internal-port
    depends_on:
      - next_frontend
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - webroot:/var/www/html
      - certbot-etc:/etc/letsencrypt
  
  # certbot:
  #   image: certbot/certbot
  #   container_name: certbot
  #   volumes: 
  #     - certbot-etc:/etc/letsencrypt
  #     - certbot-var:/var/lib/letsencrypt
  #     - webroot:/var/www/html
  #   depends_on:
  #     - nginx
  #   command: certonly --webroot --webroot-path=/var/www/html --email eiad.sorour@gmail.com --agree-tos --no-eff-email --non-interactive --keep-until-expiring -d app.thetransformix.com

  postgres:
    container_name: postgres
    image: postgres
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - PGDATA=/data/postgres
    volumes:
      - db:/data/postgres
    ports:
      - "${DB_PORT}:${DB_PORT}"
    restart: unless-stopped
    
    healthcheck:
      test: [ 'CMD', 'pg_isready', '-U', '${DB_USERNAME}' ]
    
  pgadmin4:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: unless-stopped
    ports:
      - "${PGADMIN_PORT}:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
  
volumes:
  db:
  pgadmin-data:
  webroot:
  certbot-etc:
  certbot-var:
  wdm_cache: 
  mlflow-tracking:
  mlflow-artifacts: